---
title: "Replacing interp::tri.mesh() with tRiad::Deltri()"
editor: source
knitr:
  opts_chunk: 
    warning: FALSE
    message: FALSE
---

## Motivation for Swap

While most scatter plots that had a Delauney triangulation in tripack also have one with interp, there are a handful of scatter plots that do not. These scatter plots take a HUGE amount of time to find the delauney triangulation for no clear reason. This problem is not a feature of the delauney triangulation itself since `tripack::tri.mesh()` is computed almost instantaneously for these plots. An example of a scatter plot that takes a very long time is below. I compared the time it takes for each package to compute the triangulation, including `tRiad::Deltri()`, a suggested replacement for `interp::tri.mesh()`.

```{r}
library(fitzRoy)
library(dplyr)
library(interp)
library(cassowaryr)
library(tidyverse)
# triad is not on CRAN
# devtools::install_github("ZeroDawn0D/tRiad")
library(tRiad)

# Get data and find scatter plot that is instant and long scatter plot
aflw <- fetch_player_stats(2020, comp = "AFLW")
```

```{r}
aflw_num <- aflw %>%
  select_if(is.numeric)

aflw_num <- aggregate(aflw_num[,5:37],
                      list(aflw$player.player.player.surname),
                      mean)

# problem scatter plots
a <- aflw_num$goals
c <- aflw_num$handballs

# plot it
plot(a,c)

#Follow code down to tri.mesh 
# to make sure I have the same input
ac <- cbind(cassowaryr:::unitize(a), cassowaryr:::unitize(c))
dupes <- paste(a, c, sep =",")
ac <- ac[!duplicated(dupes),]
x <- ac
y = NULL
X <- xy.coords(x, y)

system.time(interp::tri.mesh(X))
system.time(tripack::tri.mesh(X))
system.time(tRiad::DelTri(a,c))
```

For most scatter plots `interp::tri.mesh()` performs a faster Delauney triangulation than `tRiad::Deltri()`. However, this only really noticeable when working with scatter plots that have a large number of points.

```{r}
# small scatter plot
x <- runif(500)
y <- runif(500)
plot(x,y)
system.time(tRiad::DelTri(x,y))
system.time(interp::tri.mesh(x,y))

# big scatter plot
x <- runif(5000)
y <- runif(5000)
plot(x,y)
system.time(tRiad::DelTri(x,y))
system.time(interp::tri.mesh(x,y))
```

So, while `interp::tri.mesh()` is usually faster than `tRiad::Deltri()`, the occasional *very long* computation time results in `interp::tri.mesh()`having a much higher variance. This issue occurs occasionally in simulated continuous data.

```{r, eval=FALSE}
# set seed
set.seed(1)
# set n
n <- 1000
  
# time vector
triadtime <- rep(0, n)
interptime <- rep(0, n)
  
  # run a bunch of times
for(i in seq(n)){
  x <- runif(500)
  y <- runif(500)
  triadtime[i] <- system.time(tRiad::DelTri(x,y))[[3]]
  interptime[i] <- system.time(interp::tri.mesh(x,y))[[3]]
}

# compare visually
timetable <- tibble(
  triad = triadtime,
  interp = interptime
) 
# this takes a very long time to compute
saveRDS(timetable, file = "timetable1.rds") 
```

```{r}
timetable <- readRDS(file = "timetable1.rds")

timetable %>%
  pivot_longer(everything(), names_to="package", values_to="time") %>%
  ggplot(aes(x=package, y=time, colour=package)) +
  geom_jitter(width=0.5, height=0)

```

However, this problem occurs much more frequently in real, non-simulated, data sets. The problem in non-simulated data is so pronounced, that `interp::tri.mesh()` often takes longer on average than `tRiad::Deltri()`.

```{r, eval=FALSE}
# interp throws an error without preprocessing, so I'm making an in between function
prep_interp <- function(x,y){
  xy <- cbind(cassowaryr:::unitize(x), cassowaryr:::unitize(y))
  dupes <- paste(x, y, sep =",")
  xy <- xy[!duplicated(dupes),]
  x <- xy
  y = NULL
  X <- xy.coords(x, y)
  system.time(interp::tri.mesh(X))
}

prep_triad <- function(x,y){
  xy <- cbind(cassowaryr:::unitize(x), cassowaryr:::unitize(y))
  dupes <- paste(x, y, sep =",")
  xy <- xy[!duplicated(dupes),]
  system.time(tRiad::DelTri(xy[,1],xy[,2]))
}

# calculate time on collection of scatter plots
aflw_test <- aflw_num[,2:9]

combinations <- expand.grid(colnames(aflw_test), colnames(aflw_test)) %>%
    dplyr::filter(!(Var1==Var2))

# Write as a for loop because tidy version was a nightmare to debug
n <- length(combinations$Var1)
triadtime <- rep(0, n)
interptime <- rep(0, n)

for(i in seq(n)){
  x <- dplyr::pull(aflw_test,var=combinations$Var1[i])
  y <- dplyr::pull(aflw_test, var=combinations$Var2[i])
  triadtime[i] <- prep_triad(x, y)[[3]]
  interptime[i] <- prep_interp(x, y)[[3]]
}

# put into a tibble and plot
timetable <- tibble(
  triad = triadtime,
  interp = interptime
) 
# this also takes a very long time to compute
saveRDS(timetable, file = "timetable2.rds")
```

```{r}
timetable <- readRDS(file = "timetable2.rds")

timetable %>%
  pivot_longer(everything(), names_to="package", values_to="time") %>%
  ggplot(aes(x=package, y=time, colour=package)) +
  geom_jitter(width=0.3, height=0)
```

Additionally the interp package occasionally throws an error on scatter plots that are visually indistinguishable from plots that do not throw an error. These scatter plots have no issues when computed with `tRiad::Deltri()` and `tripack::tri.mesh`.

```{r}
# Plot that throws an error
d <- aflw_num$totalPossessions
e <- aflw_num$contestedPossessions
plot(d,e)

#Follow code down to tri.mesh 
# to make sure I have the same input
de <- cbind(cassowaryr:::unitize(d), cassowaryr:::unitize(e))
dupes <- paste(d, e, sep =",")
de <- de[!duplicated(dupes),]
x <- de
y = NULL
X <- xy.coords(x, y)

# compare methods
system.time(tripack::tri.mesh(X))
system.time(tRiad::DelTri(d,e))
```

```{r, error=TRUE}
system.time(interp::tri.mesh(X))
```

Additionally, while the faster tRiad triangulation is written in C++, it also has a version of its functions written in R, `triad::del.tri()`. This makes it easier for the R community to contribute and debug the code. From my understanding of interp, the actual Delauney triangulation is computed using the `shull.deltri` function from the C shull library. So tRiad has additional transparency that could prevent issues like this in the future.

Due to the issues with `interp::tri.mesh()` caused by computation time, errors, and transparency, I think it would be beneficial to replace the function with `triad::Deltri()`.

## Requirements for Swap
There are a lot of very useful functions in interp that are not `tri.mesh()`, and as far as I can tell these functions are very useful and have no issues. Therefore tRiad is not a replacement for the interp package itself. Currently tRiad is not on CRAN, however Umang (the primary author and maintainer of tRiad) is in the process of getting it approved. A bigger issue is that `triad::Deltri()` cannot just replace `interp::tri.mesh()` in it's current state. If we put a version of tRiad on CRAN, we would like it to be a version that does not need any changes to be adopted by interp and alphahull. 

Currently `tRiad::Deltri()` has an output that is identical to neither `interp::tri.mesh()` nor `interp:::shull.deltri(x1,y1)`. If the `Deltri()` output is edited to be the same as `interp:::shull.deltri(x1,y1)`, only the interp package would need to be edited to use tRiad instead of shull. If the `Deltri()` output is edited to be the same as `interp::tri.mesh()`, the interp package would need to adjust `triangles()` to accept the object, and `alphahull::delvor()` to use the triad version of the function. For this reason I think the best choice is to only replace `interp:::shull.deltri(x1,y1)`, even though `tRiad::Deltri()` was written to replace `interp::tri.mesh()`. This means both `tRiad::Deltri()` and `interp::tri.mesh()` need to be edited so the functions are compatible, assuming if everyone is happy to make this change (hopefully).
