{
  "hash": "b7768d3e03207994dcec57b213fc1d91",
  "result": {
    "markdown": "---\ntitle: \"BEX6510 Assignment\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n## Explain how this paper relates to my research\n-\n\n# Summary of Product Plots Paper\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load product plots library\ndevtools::install_github(\"hadley/productplots\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSkipping install of 'productplots' from a github remote, the SHA1 (391f500d) has not changed since last install.\n  Use `force = TRUE` to force installation\n```\n:::\n\n```{.r .cell-code}\nlibrary(productplots)\nlibrary(ggplot2)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\ncolpal <- c(\"#ff864f\",\"#fcf8ba\",\"#83c84e\")\nbluepal <- c(\"#EFF3FF\", \"#BDD7E7\", \"#6BAED6\", \"#3182BD\", \"#08519C\")\ntwopal <- c(\"#ff7f4e\", \"#42a8d2\")\n# Edit Data\nhappy_clean <- happy %>% \n  mutate(age = cut(age,\n                   breaks = seq(10, 90, 10)))\n# Fig 1\nprodplot(happy_clean, ~ happy + marital,\n         c(\"vspine\", \"hspine\"), na.rm = TRUE) +\n  aes(fill=marital) +\n  scale_fill_brewer()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\nprodplot(happy_clean, ~ marital + happy,\n         c(\"tile\", \"tile\"), na.rm = TRUE) +\n  aes(fill=marital) +\n  scale_fill_brewer()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n\n```{.r .cell-code}\nprodplot(happy_clean, ~ marital + happy,\n         c(\"hspine\", \"vbar\"), na.rm = TRUE) +\n  aes(fill=marital) +\n  scale_fill_brewer()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-3.png){width=672}\n:::\n\n```{.r .cell-code}\nprodplot(happy_clean, ~ marital + happy,\n         c(\"hspine\", \"vbar\"), na.rm = TRUE) +\n  aes(fill=marital) +\n  scale_fill_brewer()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-4.png){width=672}\n:::\n\n```{.r .cell-code}\nprodplot(happy_clean, ~ marital + happy,\n         c(\"fluct\"), na.rm = TRUE) +\n  aes(fill=marital) +\n  scale_fill_brewer() \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-5.png){width=672}\n:::\n\n```{.r .cell-code}\nprodplot(happy_clean, ~ marital + happy,\n         c(\"hbar\", \"vbar\"), na.rm = TRUE, levels=1:2) +\n  aes(fill=marital) +\n  scale_fill_manual(values=bluepal) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-6.png){width=672}\n:::\n\n```{.r .cell-code}\nprodplot(happy_clean, ~ marital + happy,\n         c(\"hbar\", \"hspine\"), na.rm = TRUE, levels=1:2) +\n  aes(fill=marital) +\n  scale_fill_manual(values=bluepal)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-7.png){width=672}\n:::\n\n```{.r .cell-code}\n# Fig 2\n# Plot 1\nhappy_clean %>%\n  prodplot(~ happy, c(\"hbar\")) + \n  aes(fill=happy) +\n  scale_fill_brewer(palette = 5,\n                    type = \"qual\") +\n  theme(legend.position = \"none\",\n        aspect.ratio = 1,\n        axis.text.y = element_blank()) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-8.png){width=672}\n:::\n\n```{.r .cell-code}\n# Plot 2\nhappy_clean %>%\n  prodplot(~ happy, c(\"hspine\")) + \n  aes(fill=happy) +\n  scale_fill_brewer(palette = 5,\n                    type = \"qual\") +\n  theme(legend.position = \"none\",\n        aspect.ratio = 1,\n        axis.text.y = element_blank()) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-9.png){width=672}\n:::\n\n```{.r .cell-code}\n# Plot 3\nhappy_clean %>%\n  prodplot(~ happy, c(\"tile\")) + \n  aes(fill=happy) +\n  scale_fill_brewer(palette = 5,\n                    type = \"qual\") +\n  theme(legend.position = \"none\",\n        aspect.ratio = 1,\n        axis.text.y = element_blank(),\n        axis.text.x = element_blank()) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-10.png){width=672}\n:::\n\n```{.r .cell-code}\n# Fig 3\n# Plot 1\nage_breaks = levels(happy_clean$age)\nmarital_breaks = levels(happy_clean$marital)\nhappy_clean %>%\n  prodplot(~ age + marital, c(\"fluct\")) + \n  aes(fill=marital) +\n  scale_fill_brewer() +\n  theme(legend.position = \"none\",\n        aspect.ratio = 5/8) +\n  scale_x_continuous(name =\"Age\",\n                     breaks=seq(0,0.875,0.125),\n                     labels = age_breaks)+\n  scale_y_continuous(name =\"Marital\",\n                     breaks=seq(0,0.8,0.2),\n                     labels = marital_breaks)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nScale for x is already present.\nAdding another scale for x, which will replace the existing scale.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-11.png){width=672}\n:::\n\n```{.r .cell-code}\n# Plot 2 **incomplete**\n# cant get missings to appear\nprodplot(happy, ~ 1 | health + year, c(\"vspine\", \"hspine\"), na.rm=TRUE) +\n  aes(fill=health) +\n  scale_fill_brewer(palette = 5) +\n  theme(aspect.ratio = 0.5,\n        legend.position=\"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-12.png){width=672}\n:::\n\n```{.r .cell-code}\n# Fig 4 (table) *not formatted but math correct*\n# looks like they had an odd data cleaning process\n# Joint\njoint <- table(happy$happy, happy$sex)/sum(table(happy$happy, happy$sex))\njoint\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               \n                      male     female\n  not too happy 0.05235082 0.06921798\n  pretty happy  0.24955186 0.30924562\n  very happy    0.13774485 0.18188886\n```\n:::\n\n```{.r .cell-code}\n# Marginals\nhappy_marg <- table(happy$happy)/sum(table(happy$happy))\nsex_marg <- table(happy$sex)/sum(table(happy$sex))\n# Conditionals\n# Sex conditional on happy\nsex_cond_happy <- matrix(nrow=3, ncol=2)\nfor(i in 1:3){\n  sex_cond_happy[i,] <-joint[i,]/happy_marg[i]\n}\nsex_cond_happy\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          [,1]      [,2]\n[1,] 0.4306271 0.5693729\n[2,] 0.4465873 0.5534127\n[3,] 0.4309459 0.5690541\n```\n:::\n\n```{.r .cell-code}\n# Happy conditional on sex\nhappy_cond_sex <- matrix(nrow=3, ncol=2)\nfor(i in 1:2){\n  happy_cond_sex[,i] <-joint[,i]/sex_marg[i]\n}\nhappy_cond_sex\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          [,1]      [,2]\n[1,] 0.1190311 0.1235611\n[2,] 0.5674110 0.5520350\n[3,] 0.3131932 0.3246902\n```\n:::\n\n```{.r .cell-code}\n# Fig 5\n# plot 1\n# a) copy and paste fig 1 plot 2\n# b \nprodplot(happy_clean, ~ sex | happy, c(\"vspine\", \"hspine\")) +\n  aes(fill=sex) +\n  scale_fill_brewer(palette = 5,\n                    type = \"qual\") +\n  theme(legend.position = \"none\",\n        aspect.ratio = 1,\n        axis.text.y = element_blank()) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-13.png){width=672}\n:::\n\n```{.r .cell-code}\n# c\nprodplot(happy_clean, ~ sex + happy, c(\"vspine\", \"hspine\")) +\n  aes(fill=sex) +\n  scale_fill_brewer(palette = 5,\n                    type = \"qual\") +\n  theme(legend.position = \"none\",\n        aspect.ratio = 1,\n        axis.text.y = element_blank()) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-14.png){width=672}\n:::\n\n```{.r .cell-code}\n# plot 2\n# a) copy and paste fig 1 plot 1\n# b) copy and paste fig 2 plot 1b\n# c\nprodplot(happy_clean, ~ sex + happy, c(\"vspine\", \"hbar\")) +\n  aes(fill=sex) +\n  scale_fill_brewer(palette = 5, type = \"qual\") +\n  theme(legend.position = \"none\",\n        aspect.ratio = 1,\n        axis.text.y = element_blank()) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-15.png){width=672}\n:::\n\n```{.r .cell-code}\n# Fig 6\n# plot 1\nprodplot(happy_clean, ~ marital, c(\"hspine\")) + \n  aes(fill=marital) +\n  scale_fill_brewer() +\n  theme(legend.position = \"none\",\n        aspect.ratio = 1,\n        axis.text.y = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-16.png){width=672}\n:::\n\n```{.r .cell-code}\n# plot 2\n  # calculate breaks\nx = table(happy$marital)/sum(table(happy$marital))\ny = cumsum(x)\nmarital_breaks2 = as.vector(y - 0.5*x)\n  # plot\nprodplot(happy_clean, ~ sex + marital, c(\"hspine\", \"hspine\")) + \n  aes(fill=sex) +\n  scale_fill_brewer(palette = 5, type = \"qual\") +\n  theme(legend.position = \"none\",\n        aspect.ratio = 1,\n        axis.text.y = element_blank()) +\n  scale_x_continuous(name =\"Marital\",\n                     breaks= marital_breaks2,\n                     labels = marital_breaks)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nScale for x is already present.\nAdding another scale for x, which will replace the existing scale.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-17.png){width=672}\n:::\n\n```{.r .cell-code}\n# plot 3\nprodplot(happy_clean, ~ happy + sex + marital, \n         c(\"vspine\", \"hspine\", \"hspine\")) + \n  aes(fill=happy) +\n  scale_fill_brewer(palette = 5, type = \"qual\") +\n  theme(legend.position = \"none\",\n        aspect.ratio = 1,\n        axis.text.y = element_blank())+\n  scale_x_continuous(name =\"Marital\",\n                     breaks= marital_breaks2,\n                     labels = marital_breaks)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nScale for x is already present.\nAdding another scale for x, which will replace the existing scale.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-18.png){width=672}\n:::\n\n```{.r .cell-code}\n# Figure 7\n# plot 1\nprodplot(happy_clean, ~ marital + age, c(\"vspine\", \"hspine\")) +\n  aes(fill=marital) +\n  scale_fill_brewer() +\n  theme(legend.position = \"none\", aspect.ratio = 1,\n        axis.text.y = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-19.png){width=672}\n:::\n\n```{.r .cell-code}\n# plot 2\n# quick\nprodplot(happy_clean, ~ age + marital, c(\"hbar\", \"vspine\"),\n         levels=1:2, na.rm=FALSE) +\n  aes(fill=marital) +\n  scale_fill_brewer() +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-20.png){width=672}\n:::\n\n```{.r .cell-code}\n# long in next chunk\n# should have been\nprodplot(happy_clean, ~ age + marital, c(\"hspine\", \"vspine\")) +\n  aes(fill=age) +\n  scale_fill_brewer() +\n  theme(legend.position = \"none\", aspect.ratio = 1,\n        axis.text.y = element_blank()) +\n  scale_y_continuous(name = \"Marital\",\n                     breaks=seq(0.1,0.9,0.2),\n                     labels = levels(happy_clean$marital))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-21.png){width=672}\n:::\n\n```{.r .cell-code}\n# Figure 8\n# Plot 1\nprodplot(happy, ~ happy + finrela + health,\n         c(\"vspine\", \"fluct\"), na.rm = TRUE) + \n  aes(fill=happy) +\n  scale_fill_manual(values = colpal) +\n  theme(aspect.ratio = 5/4,\n        legend.position = \"none\") +\n  # The fluct axis breaks should be evenly spaced\n  scale_x_continuous(breaks=seq(0,0.75,0.25),\n                     labels = levels(happy$health))+\n  scale_y_continuous(breaks=seq(0,0.8,0.2),\n                     labels = levels(happy$finrela))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nScale for x is already present.\nAdding another scale for x, which will replace the existing scale.\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-22.png){width=672}\n:::\n\n```{.r .cell-code}\n# Plot 2\nprodplot(happy, ~ happy | finrela + health,\n         c(\"vspine\", \"fluct\"), na.rm = TRUE)  + \n  aes(fill=happy) +\n  scale_fill_manual(values = colpal) +\n  theme(aspect.ratio = 5/4,\n        legend.position = \"none\") +\n  # these axis are centered for some reason\n  scale_x_continuous(breaks=seq(0.125,0.875,0.25),\n                     labels = levels(happy$health))+\n  scale_y_continuous(breaks=seq(0.1,0.9,0.2),\n                     labels = levels(happy$finrela))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nScale for x is already present.\nAdding another scale for x, which will replace the existing scale.\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-23.png){width=672}\n:::\n\n```{.r .cell-code}\n# Plot 3\nprodplot(happy, ~ happy | finrela + health,\n         c(\"hspine\", \"fluct\"), na.rm = TRUE)  + \n  aes(fill=happy) +\n  scale_fill_manual(values = colpal) +\n  theme(aspect.ratio = 5/4,\n        legend.position = \"none\") +\n  # these axis are centered for some reason\n  scale_x_continuous(breaks=seq(0.125,0.875,0.25),\n                     labels = levels(happy$health))+\n  scale_y_continuous(breaks=seq(0.1,0.9,0.2),\n                     labels = levels(happy$finrela))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nScale for x is already present.\nAdding another scale for x, which will replace the existing scale.\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-24.png){width=672}\n:::\n\n```{.r .cell-code}\n# Figure 9\nprodplot(happy_clean, ~ sex + age,\n         c(\"vspine\", \"hbar\"), na.rm = TRUE) +\n  aes(fill=sex)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-25.png){width=672}\n:::\n\n```{.r .cell-code}\n# no method for weighting plot\n\n# Figure 10\nprodplot(happy_clean, ~ happy + age,\n         c(\"vspine\", \"hbar\")) +\n  aes(fill=happy) +\n  scale_fill_manual(values = colpal)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-26.png){width=672}\n:::\n\n```{.r .cell-code}\nprodplot(happy_clean, ~ happy + age,\n         c(\"vspine\", \"hspine\")) +\n  aes(fill=happy) +\n  scale_fill_manual(values = colpal)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-27.png){width=672}\n:::\n\n```{.r .cell-code}\n# Figure 11\nprodplot(happy_clean, ~ happy + marital + sex , \n         c(\"vspine\", \"hspine\", \"hspine\"), na.rm=TRUE,\n         cascade=0) + \n  aes(fill=happy) +\n  scale_fill_manual(values =colpal) +\n  theme(legend.position = \"none\",\n        aspect.ratio = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-28.png){width=672}\n:::\n\n```{.r .cell-code}\nprodplot(happy_clean, ~ happy + marital + sex , \n         c(\"vspine\", \"hspine\", \"hspine\"), na.rm=TRUE,\n         cascade=0.15, levels=1:3, colour=\"black\", alpha=0.6) + \n  aes(fill=happy) +\n  scale_fill_manual(values = colpal) +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        aspect.ratio = 0.75) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-29.png){width=672}\n:::\n\n```{.r .cell-code}\n# Fig 12 (a lot of these are not quite right)\nprodplot(happy, ~ sex + happy , \n         c(\"hbar\", \"hbar\"), na.rm=TRUE, levels=1:2) +\n  aes(fill=sex) +\n  # Plot b\n  #coord_polar(theta = \"x\", start = 0, direction = 1, clip = \"on\") +\n  # Plot c\n  #coord_polar(theta = \"y\", start = 0, direction = 1, clip = \"on\") +\n  scale_fill_manual(values = twopal) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-30.png){width=672}\n:::\n\n```{.r .cell-code}\nprodplot(happy, ~ sex + happy , \n         c(\"vspine\", \"hbar\"), na.rm=TRUE, levels=1:2) +\n  aes(fill=sex) +\n  # Plot b\n  #coord_polar(theta = \"x\", start = 0, direction = 1, clip = \"on\") +\n  # Plot c\n  #coord_polar(theta = \"y\", start = 0, direction = 1, clip = \"on\") +\n  scale_fill_manual(values = twopal)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-31.png){width=672}\n:::\n\n```{.r .cell-code}\nprodplot(happy, ~ sex + happy , \n         c(\"hspine\", \"hspine\"), na.rm=TRUE, levels=1:2) +\n  aes(fill=sex) +\n  # Plot b\n  #coord_polar(theta = \"x\", start = 0, direction = 1, clip = \"on\") +\n  # Plot c\n  coord_polar(theta = \"y\", start = 0, direction = 1, clip = \"on\") +\n  scale_fill_manual(values = twopal) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-32.png){width=672}\n:::\n\n```{.r .cell-code}\nprodplot(happy, ~ sex + happy , \n         c(\"hspine\", \"hspine\"), na.rm=TRUE) +\n  aes(fill=sex) +\n  # Plot b\n  coord_polar(theta = \"x\") +\n  # Plot c\n  coord_polar(theta = \"y\") +\n  scale_fill_manual(values = twopal) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-33.png){width=672}\n:::\n\n```{.r .cell-code}\nprodplot(happy, ~ sex + happy , \n         c(\"vspine\", \"hspine\"), na.rm=TRUE) +\n  aes(fill=sex) +\n  # Plot b\n  coord_polar(theta = \"x\", start = 0, direction = 1) +\n  # Plot c\n  coord_polar(theta = \"y\", start = 0, direction = 1) +\n  scale_fill_manual(values = twopal) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-34.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fig 7 Attempt\nlibrary(dplyr)\nmarital_mins <- tibble(marital = levels(happy$marital),\n                       ymin = c(0,as.vector(y)[1:4]))\nage_mins <- tibble(age = levels(happy_clean$age),\n                   xmin = seq(0,0.875,0.125),\n                   xmax = seq(0.125,1,0.125))\n\n# make joint...\njoint <- table(happy_clean$age, happy_clean$marital)/sum(table(happy_clean$happy, happy_clean$sex))\n# ... and marginal distribution\nmarital_mar <- table(happy$marital)/sum(table(happy$marital))\n# find value to scale histograms by\nmax_joint <- apply(joint,2,max)\nscale <- min(marital_mar/max_joint)\n\n# find positions for age polygon\npositions <- as.data.frame.matrix(joint) %>%\n  rownames_to_column(\"age\") %>%\n  pivot_longer(cols=-age, names_to = \"marital\")  %>%\n  left_join(marital_mins) %>%\n  left_join(age_mins) %>%\n  mutate(ymax = ymin + value*scale) %>%\n  rownames_to_column(\"id\") %>%\n  select(-value) %>%\n  pivot_longer(cols=c(xmin,xmax), names_to = \"xid\", values_to = \"x\") %>%\n  pivot_longer(cols=c(ymin,ymax), names_to = \"yid\", values_to = \"y\")\n\n# need to swap rows 3 and 4 of each polygon\nfouth <- seq(from=4, to=length(positions$x), by=4)\nthird <- even - 1\nxholder <- positions$x\nyholder <- positions$y\npositions$x[third] <- xholder[fouth]\npositions$x[fouth] <- xholder[third]\npositions$y[third] <- yholder[fouth]\npositions$y[fouth] <- yholder[third]\n\n# marital positions\nbig_positions <- tibble(marital = rep(levels(happy$marital), each=4),\n                        y = rep(c(0,rep(as.vector(y)[-5], each=2), 1), each=2),\n                        x = rep(c(0,1,1,0),5))\n\n# Finally make plot\nggplot() +\n  geom_polygon(data = big_positions, aes(x = x, y = y, fill = marital, group = marital), colour=\"black\") +\n  geom_polygon(data = positions, aes(x = x, y = y, fill = marital, group = id), colour=\"black\")  +\n  scale_fill_brewer() +\n  scale_x_continuous(name = \"Age\",\n                     breaks= seq(0,0.875,0.125)+0.125*0.5,\n                     labels = levels(happy_clean$age))+\n  scale_y_continuous(name = \"Marital\",\n                     breaks= marital_breaks2,\n                     labels = levels(happy_clean$marital)) +\n  theme(legend.position = \"none\",\n        aspect.ratio = 1.25)\n```\n:::\n\n## 1 Introduction\n- Visualising tables of counts, proportions, and probabilities\n- Framework for visualisations of categorical data\n- Focuses on  area of charts - area of graphical element is proportional to the underlying count, proportion or probability\n- product plots \n  - main idea: width x height = area \n  - and conditional x marginal = joint\n  - also have inverse where high dimensional distribution can be factorised into a product of low-dimensional conditional and marginal distributions.\n- To illustrate the idea they use the same data from a happiness survey in all examples. \n  - Discrete: age, year\n  - Categorical: degree, relative financial status, happiness, health, marital status, sex\n  - Continuous: wstall (probability weight)?\n\n## 2 Related Work\n- Other efforts to develop domain specific languages for visualisation are:\n  - APT [6] and VisQL [7]\n    - *Add notes from these papers*\n    - . This work is similar but carves out a smaller niche.\n    - Compared to these product plots are less expressive but more efficient because the number of primitives (simple elemements) required to describe the smaller domain is smaller (?)\n  - HiVE [8]\n    - *Add notes from this paper*\n  - Polaris [9]\n    - *Add notes from this paper*\n    - essentially a 3D extension of the trellis framework [10,11]\n\n## 3 Graphical Primitives\n- area must be proportional to count.\n  - key constraint for area plots\n  - total area is usually constrained\n- partitions must be disjoint.\n  - to be able to see the complete area each rectangle must be not overlapping. \n- partitions must be rectangular\n  - allows many interesting pecterptual tasks to only require comparing lengths or positions along a common scale \n  - these are easier than comparing areas\n  - little evidence rectangles are the best shape for comparison [15,16]\n- These constraints give rise to 4 graphical primitives\n\n### 3.1 1d primitives\n- There are three 1d primitives\n  - bars: height s proportional to value and width is equally divided. Occupy mean(x-max(x)) of the total area *(???)* isnt that the negative of the whitespace?? shouldnt it be mean(X/max(X))\n  - splines: width proportional to value, height occupies full range.\n  - tiles: No restrictions on height and width, just tile the plane with rectangles and try to keep the aspect ratio of each rectangle close to 1. A squarified treemap.\n- Each visualisation has strengths and weaknesses\n  - easy to compare the value associated with bars because comparing position on a common scale\n  - splines and tiles are harder to read but work better reccursively\n\n### 3.2 2d primitives\n- all 2d primitives are created by combining 1d primitives except for one\n  - fluct: has height and width proportional to the square root of the count and is arranged on a rectangular grid formed by the levels of the two variables. \n  - allows comparisons both vertically and horizontally\n  - special case occurs when two variables are jointly uniformly distributed, usually as a result of conditioning. useful for identifying missing combinations\n\n\n## 4 Probabulity and Plot Products\n- To construct plots of higher dimensions we need a way to decompose them into 1d and 2d components.\n\n### 4.1 Joint distribution are the product of marginals and conditionals\n- turn data into a PMF\n- Variables are happy and sex are shown in several tables. \n- Joint distribution\n  - Q: what proportion of all people are male and very happy?\n- Conditional distributions\n  - Q: what proportion of males are not too happy?\n- Marginal Distributions\n  - Q: What proportion of respondents were male? What proportion were very happy?\n- Have the equation $f(x|y) = f(x,y)/f(y)$\n  - Therefore given a conditional and a marginal we can find the joint distribution\n  - $f(x,y) = f(x|y)f(y)$\n  - Only the joint distribution contains the full information about the relationship between all variables involved\n  - can get the marginal distribution by integrating/summing the other variable out, i.e. $f(x)=\\int_y{f(x,y)}$\n  - These definitions extend to higher dimensions\n    - $f(x,y,z) = f(x,y|z)f(z)$\n    - $f(x,y,z) = f(x|z,y)f(z,y)$\n    - $f(x,y,z) = f(x|y,z)f(y|z)f(z)$\n- Therefore we can build any high dimensional PMF as a product of low-dimensional conditional and marginal PMFs\n- Use low-dimensional primitives as graphical analog of this multiplication\n\n### 4.2 Area is the product of height and width\n- area is also a product so it can be connected\n  - e.g. 1 mosaic plot: height f(sex|happy) X width = f(happy) = area f(sex, happy)\n  - e.g. 2: stacked bar chart: position f(happy) X proportion f(sex|happy) = length f(sex, happy) ~ area = c*f(happy, sex).\n- Algorithm gives a rough idea of computation\n  - calculate one marginal and i conditional distributions\n  - for each probability in the marginal distribution, \n    - divide the probabilities (aka the bounds) into i sets of new bounds, one for each level of the categorical variabe. \n    - if i=1 like in the example we keep the original bounds\n    - for each new bound there is a matching conditional distribution, call the partition function\n    - drop one element from the list of drawing primitives\n- Different partitions reveal different features\n  - Hard to identify if this is because they used splines for both of the first plot but splines and bar for the second plot or because of the different distributions.\n  - $f(marial,age) = f(marital|age)f(age)$ highlights most young people are unmaried\n  - $f(marial,age) = f(age|marital)f(marital)$ highlights few unmarried people over the age of 30\n  - I am also not sure how much I agree with this assessment of what the plots say. I don't disagree with the premise though. I do wonder if that is because both comments are about being unmarried.\n- Conditioning is also a useful tool because it allows us to remove relationships that are known or uninteresting.\n  - Give example of $f(happy, health, financial)$\n  - When show all as raw proportions $f(happy, health, financial)$ = $f(happy| health, financial)f(heath,financial)$ your main take away is that most people are in good health and average financial standing, however it is difficult to see how happiness varies within these conditions\n  - If you condition on health and financial status, comparing happiness across these groups becomes easier because comparing positions along a common scale is an easier perception task.\n  - Depending on the comparison we are most interested in, we can make it easier to compare across different variables\n\n## 5 Existing Plot Types\n1D\n  - Bar chart (hbar)\n  - Column chart (vbar)\n  - Spineplot (spine)\n  - Fluctuation chart (fluct)\n2D\n  - Stacked bar chart (1hbar and 1vspine)\n  - Nested bar chart (2 hbars)\n  - Equal bin size (1 fluct and 1 vspine)\n  - Mosaic plot (alternating hspine vspine)\n  - Double Decker (n-1 hspines and 1 vspine)\n  - Treemap (n spines)\n  - Squarified treemap (n tiles)\n  - Generalised treemaps (any plot ending with a tile)\n  - Trellis graphics (similar but not identical, created by conditioning in tellising variables)\n\n## 6 Display Considerations\n- Hard to label axis\n  - often two variables end up on the same axis so we cant label it.\n  - there are other ways to label the axis other than colour\n    - e.g. text labels used to occupy the space of the region they label\n    - in the interactive setting can have linked brushing from high dimensional to low dimensional plots\n    - some apsect ratios are more aesthetically pleasing, e.g. the square for the fluct. wonder if aspect ratios close to the golden ratio might be more appealing\n    - does not seem to be previous work on aspect ratios and aesthetics although they do seem to affect perception\n    - need more research on aesthetics and usability\n\n## Variations and Extensions\n### 7.1 Weighting\n- instead of counts can plot weighted data\n- i.e. redo plots where the data is weighted because of sampling or some other reason\n- weights are also useful to move from number of countries to number of people\n### 7.2 Continuous Data\n- instead of counts can plot continuous data\n- trivially extended by binning the continuous data to make them discrete\n  - can do bins of equal width OR bins containing an equal number of points\n- extension allows product plots to also describe histograms and spinograms\n  - no gaps are displated between adjacent rectangles when displaying continuous data\n- more theoretical approach is to increase number of bins infintesimally leading to a probability density function\n  - approach can include one continuous variable but two variables need an additional aesthetic such as colour to visualise a 2d joint density.\n  - >=3 continuous variables breaks the product plots framework\n  - if you express the innersmost proportion with colour (instead of area) can describe dimensional stacking (apparently a SPLOM is dimensional stacking)\n  \n### 7.3 Area not proportional to weight\n- relax display constraints\n- to distinguish between zeros, missing values, and very small values\n- zero weight should have zero area but instead set it to be at a minimum perceptable size.\n  - set as a different colour to let the reader know the area=weight rule is violated\n- could also  be useful to restrict max value so you can see other small values\n- could also do other non linear transformations\n  - e.g. Tukey applied the technique to histograms where the y axis has a square root scale\n\n### 7.4 Non-disjoint partitions\n- relax display constraints\n- e.g. cascaded treemaps \n- makes it easier to see all the levels of the hierarchy and highlights the structure\n  - e.g. each of $f(sex)$, $f(marital, sex)$, and $f(happy|sex, marital)$ get a layer.\n  - hard to tell when something is $f(X|Y)$ or $f(X,Y)$\n\n### 7.5 Non-rectangular partitions\n- relax display constraints\n- pie chart not retangular and does not fall into the framework, but it does relate\n  - it is a hspline draw in polar coodinates with the x-coordinate mapped to angle and the y coordinate mapped to radius\n- Other plots that are product plots drawn in polar coodinates\n  - Wind rose and fourfold displays (1 hbar and 1 vspine)\n    - Nightingales coxcomb is similar but the slices overlap so it violates the disjoint area constraint\n  - Concentric pie chart (1 hspine)\n  - Doughnut plot (1hspine and 1 vspine)\n  - Racetrack plot (1 vbar)\n  - Infoslides (n vbars)\n- research suggests that visualisations in polar coordinates are harder to read that visualisations in cartesian coordinates\n- y-axis must be square root transformed to ensure that counds stay proportional to areas\n  - Fan-lenses and Stasko's radial displays deliberatrely do not do this to emphasise the outer levels.\n- Other non-rectangular graphics\n  - circular treemaps\n  - space-filling curves\n  - voronoi treemaps\n\n## 8 R Package\n- made an R package called productplots\n- two main functions\n  - prodcalc: computes the coordinates of each rectangle\n  - prodplot: displays the rectangles with the ggplot2 package\n- each graphical primitive is represented by a function (e.g. hspine()) which allows you to write a new function and use the existing calculation and display algorithms\n\n## 9 Conclusion\n- Framework is successful at describing many existing graphics that display tables of counts, proportions and probabilities\n- framework leads to many possibilities as a 4d PMF can be factorised in 5 different ways, with 24 different ways of ordering the variables. Have 5 yeas of displaying a 1d PMF and 1 way of displaying a 2D pmf\n  -  defines a large space of potential plots. Have $24*(5^4+5^2+5^2+5^2+1)=16824$ plots before we consider conditioning\n  - IDK where that number came from\n    - on the function end:\n      - 24 combinations of variables\n      - 5 ways of factorising\n      - 24*5 different factorisations\n      - 5 ways of displaying a 1D PMF\n        - within the factorisations there are (4, 2, 2, 2, 0) 1D PMFs\n      - 1 way of displaying a 2D pmf\n        - within the factorisations there are (0, 1, 1, 1, 2)\n        - it looks like it is done\n          $5*5*5*5$\n          $5*5*1$\n          $5*1*5$\n          $1*5*5$\n          $1*1$\n- Well thought out interactions make it easier to navigate this space & developed a prototype as part of the cranvas suite of interactive grahics\n- also exploring the connection between product plots and log-linear (AKA poisson) models (the statistical models most commonly used for count data)\n  - e.g. looking for straight lines in a mosaic plot corresponds to a formal test of independence between variables\n  - generally we are interested in connections between visualisation and formal statistical tests\n  - also how significant coefficients can help us choose a set of useful plots\n  - given a question can we select appropriate plots? given a plot can we suggest questions it might answer?\n- Product plots need to be extension to display uncertainty\n- Continuous data is incorperated in a simplistic manner.\n  - can it be extended for something like the average shifted histogram or the kernel density estimate\n\n# Personal notes\n- The distinction between conditional and joint seems to be very blurry and coding the distributions makes this even more confusing\n  - also makes the number of permutations a little odd because it doesn't quite seem to work how they suggest\n- Cant make weighted data plots in their thing\n\n# Extension of Work\n- Does this work extend to expected values or visualisations of other mathematical process?\n- Could be expanded by looking at which other perceptual tasks are combinations of others\n- extension to continuous case\n- Can the questions be combined similarly the way we can combine the PMF and the graphics\n- Connections between formal statistical tests and visualisations\n- uncertainty visualisation extensions",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}